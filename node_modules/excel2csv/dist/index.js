#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var util_1 = require("util");
var xlsx_1 = __importDefault(require("xlsx"));
var writeFileAsync = util_1.promisify(fs_1.default.writeFile);
function convert(excelPath, partialOptions) {
    if (partialOptions === void 0) { partialOptions = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var options, csv, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    options = formOptions(excelPath, partialOptions);
                    csv = excelToJson(excelPath, {
                        sheetIndex: options.sheetIndex,
                        sheetName: options.sheetName,
                    });
                    if (!options.writeCsv) return [3 /*break*/, 2];
                    return [4 /*yield*/, writeFileAsync(options.csvPath, csv)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, true];
                case 2: return [2 /*return*/, csv];
                case 3:
                    error_1 = _a.sent();
                    throw error_1;
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.convert = convert;
function formOptions(excelPath, partialOptions) {
    var excelFilename = path_1.default.parse(excelPath).name;
    var options = __assign({
        csvPath: excelFilename + ".csv",
        writeCsv: false,
    }, partialOptions);
    return options;
}
function excelToJson(excelPath, options) {
    if (options === void 0) { options = {}; }
    var workbook = xlsx_1.default.readFile(excelPath);
    var sheetName = getExcelSheetName(workbook.SheetNames, options);
    var sheet = workbook.Sheets[sheetName];
    return xlsx_1.default.utils.sheet_to_csv(sheet);
}
function getExcelSheetName(sheetNames, options) {
    if (options.sheetIndex && options.sheetIndex < sheetNames.length) {
        return sheetNames[options.sheetIndex];
    }
    else if (options.sheetName && sheetNames.indexOf(options.sheetName) > -1) {
        return options.sheetName;
    }
    else {
        return sheetNames[0];
    }
}
function main() {
    if (require.main !== module) { // required as module
        return;
    }
    commander_1.default
        .version('0.1.0', '-v, --version')
        .arguments('<excel_file>')
        .option('-n, --sheet-index <sheet_name>', 'Sheet index to convert (defaults to 0)')
        .option('-s, --sheet-name <sheet_name>', 'Sheet name to convert')
        .option('-o, --output <csv_file>', 'Output CSV file path (defaults to input file name)')
        .action(function (excelFile) {
        if (excelFile) {
            var options = { writeCsv: true };
            if (commander_1.default.output) {
                options.csvPath = commander_1.default.output;
            }
            if (Number(commander_1.default.sheetIndex)) {
                options.sheetIndex = Number(commander_1.default.sheetIndex);
            }
            else if (commander_1.default.sheetName) {
                options.sheetName = commander_1.default.sheetName;
            }
            convert(excelFile, options);
        }
    })
        .parse(process.argv);
    return;
}
main();
//# sourceMappingURL=index.js.map